{"version":3,"sources":["../../src/recurrent/rnn-time-step.js"],"names":["RNNTimeStep","options","model","input","inputSize","outputSize","lastHiddenSize","hiddenSizes","length","outputConnector","output","hiddenLayers","equation","outputs","equationConnection","equationConnections","initialLayerInputs","getEquation","push","i","max","add","multiply","equations","runs","errorSum","bindEquation","inputIndex","current","next","runInput","weights","error","Math","abs","deltas","totalCost","runBackpropagate","maxPredictionLength","isSampleI","temperature","isRunnable","lastOutput","outputMatrix","Error","defaults","learningRate","decayRate","smoothEps","regc","clipval","json","dataFormatter","trainDefaults"],"mappings":"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","file":"rnn-time-step.js","sourcesContent":["import Matrix from './matrix';\nimport RandomMatrix from './matrix/random-matrix';\nimport Equation from './matrix/equation';\nimport RNN from './rnn';\n\nexport default class RNNTimeStep extends RNN {\n  constructor(options) {\n    super(options);\n  }\n\n  createInputMatrix() {\n    this.model.input = new RandomMatrix(this.inputSize, 1, 0.08);\n  }\n\n  createOutputMatrix() {\n    let model = this.model;\n    let outputSize = this.outputSize;\n    let lastHiddenSize = this.hiddenSizes[this.hiddenSizes.length - 1];\n\n    //whd\n    model.outputConnector = new RandomMatrix(outputSize, lastHiddenSize, 0.08);\n    //bd\n    model.output = new Matrix(outputSize, 1);\n  }\n\n  bindEquation() {\n    let model = this.model;\n    let hiddenSizes = this.hiddenSizes;\n    let hiddenLayers = model.hiddenLayers;\n    let equation = new Equation();\n    let outputs = [];\n    let equationConnection = model.equationConnections.length > 0\n      ? model.equationConnections[model.equationConnections.length - 1]\n      : this.initialLayerInputs\n      ;\n\n      // 0 index\n    let output = this.getEquation(equation, equation.input(model.input), equationConnection[0], hiddenLayers[0]);\n    outputs.push(output);\n    // 1+ indices\n    for (let i = 1, max = hiddenSizes.length; i < max; i++) {\n      output = this.getEquation(equation, output, equationConnection[i], hiddenLayers[i]);\n      outputs.push(output);\n    }\n\n    model.equationConnections.push(outputs);\n    equation.add(equation.multiply(model.outputConnector, output), model.output);\n    model.equations.push(equation);\n  }\n\n  /**\n   *\n   * @param {Number[]} input\n   * @returns {number}\n   */\n  runInput(input) {\n    this.runs++;\n    let model = this.model;\n    let errorSum = 0;\n    let equation;\n    while (model.equations.length < input.length - 1) {\n      this.bindEquation();\n    }\n    const outputs = [];\n\n    if (this.inputSize === 1) {\n      for (let inputIndex = 0, max = input.length - 1; inputIndex < max; inputIndex++) {\n        // start and end tokens are zeros\n        equation = model.equations[inputIndex];\n\n        const current = input[inputIndex];\n        const next = input[inputIndex + 1];\n        const output = equation.runInput([current]);\n        for (let i = 0; i < output.weights.length; i++) {\n          const error = output.weights[i] - next;\n          // set gradients into log probabilities\n          errorSum += Math.abs(error);\n\n          // write gradients into log probabilities\n          output.deltas[i] = error;\n          outputs.push(output.weights);\n        }\n      }\n    } else {\n      for (let inputIndex = 0, max = input.length - 1; inputIndex < max; inputIndex++) {\n        // start and end tokens are zeros\n        equation = model.equations[inputIndex];\n\n        const current = input[inputIndex];\n        const next = input[inputIndex + 1];\n        const output = equation.runInput(current);\n        for (let i = 0; i < output.weights.length; i++) {\n          const error = output.weights[i] - next[i];\n          // set gradients into log probabilities\n          errorSum += Math.abs(error);\n\n          // write gradients into log probabilities\n          output.deltas[i] = error;\n          outputs.push(output.weights);\n        }\n      }\n    }\n    //this.model.equations.length - 1;\n    this.totalCost = errorSum;\n    return errorSum;\n  }\n\n  runBackpropagate() {\n    for (let i = this.model.equations.length - 1; i > -1; i--) {\n      this.model.equations[i].runBackpropagate();\n    }\n  }\n\n\n  /**\n   *\n   * @param {Number[]|Number} [input]\n   * @param {Number} [maxPredictionLength]\n   * @param {Boolean} [isSampleI]\n   * @param {Number} temperature\n   * @returns {Number[]|Number}\n   */\n  run(input = [], maxPredictionLength = 1, isSampleI = false, temperature = 1) {\n    if (!this.isRunnable) return null;\n    const model = this.model;\n    while (model.equations.length < maxPredictionLength) {\n      this.bindEquation();\n    }\n    let lastOutput;\n    if (this.inputSize === 1) {\n      for (let i = 0; i < input.length; i++) {\n        let outputMatrix = model.equations[i].runInput([input[i]]);\n        lastOutput = outputMatrix.weights;\n      }\n    } else {\n      for (let i = 0; i < input.length; i++) {\n        let outputMatrix = model.equations[i].runInput(input[i]);\n        lastOutput = outputMatrix.weights;\n      }\n    }\n    if (this.outputSize === 1) {\n      return lastOutput[0]\n    }\n    return lastOutput;\n  }\n\n  /**\n   *\n   * @returns {Function}\n   */\n  toFunction() {\n    throw new Error('not implemented');\n  }\n}\n\nRNNTimeStep.defaults = {\n  inputSize: 1,\n  hiddenSizes:[20],\n  outputSize: 1,\n  learningRate: 0.01,\n  decayRate: 0.999,\n  smoothEps: 1e-8,\n  regc: 0.000001,\n  clipval: 5,\n  json: null,\n  dataFormatter: null\n};\n\nRNNTimeStep.trainDefaults = RNN.trainDefaults;"]}