{"version":3,"sources":["../../src/utilities/data-formatter.js"],"names":["DataFormatter","values","maxThreshold","undefined","indexTable","characterTable","characters","buildCharactersFromIterable","buildTables","tempCharactersTable","dataFormatterIndex","dataFormatterLength","length","hasOwnProperty","characterIndex","charactersLength","character","push","value","result","i","max","index","Error","value1","value2","toIndexes","split","concat","indices","toCharacters","join","addSpecial","arguments","special","specialIndex","JSON","stringify","toString","replace","toIndexesInputOutput","String","fromCharCode","dataFormatter","fromAllPrintable","addInputOutput","string","prototype","Set","array","filter","v","a","indexOf","sort","json"],"mappings":"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","file":"data-formatter.js","sourcesContent":["/**\n *\n * @param {String[]|Number[]} values\n * @param maxThreshold\n * @constructor\n */\nexport default class DataFormatter {\n  constructor(values, maxThreshold = 0) {\n    if (values === undefined) return;\n\n    this.values = values;\n    // go over all characters and keep track of all unique ones seen\n    // count up all characters\n    this.indexTable = {};\n    this.characterTable = {};\n    this.characters = [];\n    this.buildCharactersFromIterable(values);\n    this.buildTables(maxThreshold);\n  }\n\n  buildCharactersFromIterable(values) {\n    let tempCharactersTable = {};\n    for (let dataFormatterIndex = 0, dataFormatterLength = values.length; dataFormatterIndex < dataFormatterLength; dataFormatterIndex++) {\n      let characters = values[dataFormatterIndex];\n\n      if (characters.hasOwnProperty('length')) {\n        for (let characterIndex = 0, charactersLength = characters.length; characterIndex < charactersLength; characterIndex++) {\n          let character = characters[characterIndex];\n          if (tempCharactersTable.hasOwnProperty(character)) continue;\n          tempCharactersTable[character] = true;\n          this.characters.push(character);\n        }\n      } else {\n        let character = values[dataFormatterIndex];\n        if (tempCharactersTable.hasOwnProperty(character)) continue;\n        tempCharactersTable[dataFormatterIndex] = true;\n        this.characters.push(character);\n      }\n    }\n  }\n\n  buildTables(maxThreshold) {\n    // filter by count threshold and create pointers\n    let charactersLength = this.characters.length;\n    for(let characterIndex = 0; characterIndex < charactersLength; characterIndex++) {\n      let character = this.characters[characterIndex];\n      if(characterIndex >= maxThreshold) {\n        // add character to dataFormatter\n        this.indexTable[character] = characterIndex;\n        this.characterTable[characterIndex] = character;\n      }\n    }\n  }\n\n  toIndexes(value, maxThreshold = 0) {\n    let result = [];\n    let indexTable = this.indexTable;\n\n    for (let i = 0, max = value.length; i < max; i++) {\n      let character = value[i];\n      let index = indexTable[character];\n      if (index === undefined) {\n        throw new Error(`unrecognized character \"${ character }\"`);\n      }\n      if (index < maxThreshold) continue;\n      result.push(index);\n    }\n\n    return result;\n  }\n\n  toIndexesInputOutput(value1, value2 = null, maxThreshold = 0) {\n    let result;\n    if (typeof value1 === 'string') {\n      result = this.toIndexes(value1.split('').concat(['stop-input', 'start-output']), maxThreshold);\n    } else {\n      result = this.toIndexes(value1.concat(['stop-input', 'start-output']), maxThreshold);\n    }\n    \n    if (value2 === null) return result;\n\n    if (typeof value2 === 'string') {\n      return result.concat(this.toIndexes(value2.split(''), maxThreshold));\n    } else {\n      return result.concat(this.toIndexes(value2, maxThreshold));\n    }\n  }\n\n  toCharacters(indices, maxThreshold = 0) {\n    let result = [];\n    let characterTable = this.characterTable;\n\n    for (let i = 0, max = indices.length; i < max; i++) {\n      let index = indices[i];\n      if (index < maxThreshold) continue;\n      let character = characterTable[index];\n      if (character === undefined) {\n        throw new Error(`unrecognized index \"${ index }\"`);\n      }\n      result.push(character);\n    }\n\n    return result;\n  }\n\n  toString(indices, maxThreshold) {\n    return this.toCharacters(indices, maxThreshold).join('');\n  }\n\n  addInputOutput() {\n    this.addSpecial('stop-input');\n    this.addSpecial('start-output');\n  }\n\n  static fromAllPrintable(maxThreshold, values = ['\\n']) {\n    for(let i = 32; i <= 126; i++) {\n      values.push(String.fromCharCode(i));\n    }\n    return new DataFormatter(values, maxThreshold);\n  }\n\n  static fromAllPrintableInputOutput(maxThreshold, values = ['\\n']) {\n    const dataFormatter = DataFormatter.fromAllPrintable(maxThreshold, values);\n    dataFormatter.addInputOutput();\n    return dataFormatter;\n  }\n\n  static fromStringInputOutput(string, maxThreshold) {\n    const values = String.prototype.concat(...new Set(string));\n    const dataFormatter = new DataFormatter(values, maxThreshold);\n    dataFormatter.addInputOutput();\n    return dataFormatter;\n  }\n\n  static fromArrayInputOutput(array, maxThreshold) {\n    const dataFormatter = new DataFormatter(array.filter((v, i, a) => a.indexOf(v) === i).sort(), maxThreshold);\n    dataFormatter.addInputOutput();\n    return dataFormatter;\n  }\n\n  static fromString(string, maxThreshold) {\n    const values = String.prototype.concat(...new Set(string));\n    return new DataFormatter(values, maxThreshold);\n  }\n\n  static fromJSON(json) {\n    const dataFormatter = new DataFormatter();\n    dataFormatter.indexTable = json.indexTable;\n    dataFormatter.characterTable = json.characterTable;\n    dataFormatter.values = json.values;\n    dataFormatter.characters = json.characters;\n    return dataFormatter;\n  }\n\n  addSpecial() {\n    for (let i = 0; i < arguments.length; i++) {\n      const special = arguments[i];\n      let specialIndex = this.indexTable[special] = this.characters.length;\n      this.characterTable[specialIndex] = special;\n      this.characters.push(special);\n    }\n  }\n\n  toFunctionString() {\n    return `\nvar characterTable = ${ JSON.stringify(this.characterTable) };\nvar indexTable = ${ JSON.stringify(this.indexTable) };\nvar characters = ${ JSON.stringify(this.characters) };\n${ this.toIndexes.toString()\n      .replace(/(let|var) indexTable = this[.]indexTable;\\n/, '')\n      .replace(/this[.]/g, '') }\n${ this.toIndexesInputOutput.toString().replace(/this[.]/g, '') }\n${ this.toCharacters.toString()\n      .replace(/(let|var) characterTable = this[.]characterTable;\\n/g, '')\n      .replace(/this[.]/, '') }\n`;\n  }\n}\n"]}