{"version":3,"sources":["../src/lookup.js"],"names":["lookup","hashes","hash","reduce","memo","Object","assign","lookupFromHash","index","i","array","z","length"],"mappings":";;;;;;;;;;AAAA;IACqBA,M;;;;;;;;AACnB;;;;;gCAKmBC,M,EAAQ;AACzB,UAAIC,OAAOD,OAAOE,MAAP,CAAc,UAACC,IAAD,EAAOF,IAAP,EAAgB;AACvC,eAAOG,OAAOC,MAAP,CAAcF,IAAd,EAAoBF,IAApB,CAAP;AACD,OAFU,EAER,EAFQ,CAAX;;AAIA,aAAOF,OAAOO,cAAP,CAAsBL,IAAtB,CAAP;AACD;;AAED;;;;;;;;mCAKsBA,I,EAAM;AAC1B,UAAIF,SAAS,EAAb;AACA,UAAIQ,QAAQ,CAAZ;AACA,WAAK,IAAIC,CAAT,IAAcP,IAAd,EAAoB;AAClBF,eAAOS,CAAP,IAAYD,OAAZ;AACD;AACD,aAAOR,MAAP;AACD;;AAED;;;;;;;;;4BAMeA,M,EAAQE,I,EAAM;AAC3B,UAAIQ,QAAQ,EAAZ;AACA,WAAK,IAAID,CAAT,IAAcT,MAAd,EAAsB;AACpBU,cAAMV,OAAOS,CAAP,CAAN,IAAmBP,KAAKO,CAAL,KAAW,CAA9B;AACD;AACD,aAAOC,KAAP;AACD;;AAED;;;;;;;;;2BAMcV,M,EAAQU,K,EAAO;AAC3B,UAAIR,OAAO,EAAX;AACA,WAAK,IAAIO,CAAT,IAAcT,MAAd,EAAsB;AACpBE,aAAKO,CAAL,IAAUC,MAAMV,OAAOS,CAAP,CAAN,CAAV;AACD;AACD,aAAOP,IAAP;AACD;;AAED;;;;;;;;oCAKuBQ,K,EAAO;AAC5B,UAAIV,SAAS,EAAb;AACA,UAAIW,IAAI,CAAR;AACA,UAAIF,IAAIC,MAAME,MAAd;AACA,aAAOH,MAAM,CAAb,EAAgB;AACdT,eAAOU,MAAMD,CAAN,CAAP,IAAmBE,GAAnB;AACD;AACD,aAAOX,MAAP;AACD;;;;;;kBArEkBA,M","file":"lookup.js","sourcesContent":["/* Functions for turning sparse hashes into arrays and vice versa */\nexport default class lookup {\n  /**\n   * Performs `[{a: 1}, {b: 6, c: 7}] -> {a: 0, b: 1, c: 2}`\n   * @param {Object} hashes\n   * @returns {Object}\n   */\n  static buildLookup(hashes) {\n    let hash = hashes.reduce((memo, hash) => {\n      return Object.assign(memo, hash);\n    }, {});\n\n    return lookup.lookupFromHash(hash);\n  }\n\n  /**\n   * performs `{a: 6, b: 7} -> {a: 0, b: 1}`\n   * @param {Object} hash\n   * @returns {Object}\n   */\n  static lookupFromHash(hash) {\n    let lookup = {};\n    let index = 0;\n    for (let i in hash) {\n      lookup[i] = index++;\n    }\n    return lookup;\n  }\n\n  /**\n   * performs `{a: 0, b: 1}, {a: 6} -> [6, 0]`\n   * @param {*} lookup\n   * @param {*} hash\n   * @returns {Array}\n   */\n  static toArray(lookup, hash) {\n    let array = [];\n    for (let i in lookup) {\n      array[lookup[i]] = hash[i] || 0;\n    }\n    return array;\n  }\n\n  /**\n   * performs `{a: 0, b: 1}, [6, 7] -> {a: 6, b: 7}`\n   * @param {Object} lookup\n   * @param {Array} array\n   * @returns {Object}\n   */\n  static toHash(lookup, array) {\n    let hash = {};\n    for (let i in lookup) {\n      hash[i] = array[lookup[i]];\n    }\n    return hash;\n  }\n\n  /**\n   *\n   * @param {Array} array\n   * @returns {*}\n   */\n  static lookupFromArray(array) {\n    let lookup = {};\n    let z = 0;\n    let i = array.length;\n    while (i-- > 0) {\n      lookup[array[i]] = z++;\n    }\n    return lookup;\n  }\n}"]}